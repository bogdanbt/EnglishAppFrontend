

// import React, { useEffect, useState, useContext } from "react";
// import { useNavigate } from "react-router-dom";
// import { AuthContext } from "../context/AuthContext";
// import MatchExamplePairsGame from "./MatchExamplePairsGame";
// import API from "../utils/api";

// const GAME_WORDS_KEY = "gameWordList";

// const DailyGames = () => {
//   const { user } = useContext(AuthContext);
//   const navigate = useNavigate();
//   const [wordList, setWordList] = useState([]);


//    // üîí –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –≤ handleWordComplete
//   const progressingRef = useRef(false);


//   useEffect(() => {
//     const stored = localStorage.getItem(GAME_WORDS_KEY);
//     if (stored) {
//       try {
//         const parsed = JSON.parse(stored);
//         if (Array.isArray(parsed)) {
//           // –æ—á–∏—Å—Ç–∏–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
//           localStorage.removeItem(GAME_WORDS_KEY);
//           localStorage.setItem(GAME_WORDS_KEY, JSON.stringify(parsed));
//           setWordList(parsed);
//         }
//       } catch (err) {
//         console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ gameWordList:", err);
//       }
//     }
//   }, []);

//   const handleWordComplete = async () => {
//     const current = wordList[0];
//     const remaining = wordList.slice(1);

//     try {
//       await API.post("/append-history", {
//         userId: user.id,
//         word: current.word,
//         courseName: current.courseName,
//         date: new Date().toISOString(),
//         status: "intro",
//       });
//     } catch (error) {
//       console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏—Å—Ç–æ—Ä–∏–∏:", error);
//     }

//     if (remaining.length === 0) {
//       localStorage.removeItem(GAME_WORDS_KEY);
//       navigate("/courses");
//     } else {
//       localStorage.setItem(GAME_WORDS_KEY, JSON.stringify(remaining));
//       setWordList(remaining);
//     }
//   };

//   return (
//     <div className="container mt-5 text-center">
//       {wordList.length > 0 ? (
//         <>
//           <p className="text-muted mb-3">
//             –û—Å—Ç–∞–ª–æ—Å—å —Å–ª–æ–≤: {wordList.length}
//           </p>
//           <MatchExamplePairsGame
//             word={wordList[0].word}
//             onComplete={handleWordComplete}
//           />
//         </>
//       ) : (
//         <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤...</p>
//       )}
//     </div>
//   );
// };

// export default DailyGames;
// DailyGames.jsx
import React, { useEffect, useRef, useState, useContext } from "react";
import { useNavigate } from "react-router-dom";
import { AuthContext } from "../context/AuthContext";
import MatchExamplePairsGame from "./MatchExamplePairsGame";
import API from "../utils/api";

const GAME_WORDS_KEY = "gameWordList";

const DailyGames = () => {
  const { user } = useContext(AuthContext);
  const navigate = useNavigate();
  const [wordList, setWordList] = useState([]);

  // üîí –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ —Å–ª–æ–≤–∞
  const progressingRef = useRef(false);

  useEffect(() => {
    const stored = localStorage.getItem(GAME_WORDS_KEY);
    if (stored) {
      try {
        const parsed = JSON.parse(stored);
        if (Array.isArray(parsed)) {
          // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –µ—Å—Ç—å
          setWordList(parsed);
        }
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ gameWordList:", err);
      }
    }
  }, []);

  // –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –æ–ø—É—Å—Ç–µ–ª–∞ –∏ –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî —É—Ö–æ–¥–∏–º –Ω–∞ –∫—É—Ä—Å—ã
  useEffect(() => {
    if (wordList.length === 0 && !localStorage.getItem(GAME_WORDS_KEY)) {
      navigate("/courses");
    }
  }, [wordList.length, navigate]);

  const handleWordComplete = async () => {
    if (progressingRef.current) return;
    progressingRef.current = true;

    let finishedWord = null;

    // ‚úÖ —Ä–µ–∂–µ–º –æ—á–µ—Ä–µ–¥—å –∞—Ç–æ–º–∞—Ä–Ω–æ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º localStorage
    setWordList((prev) => {
      const [current, ...rest] = prev;
      finishedWord = current || null;

      if (rest.length === 0) {
        localStorage.removeItem(GAME_WORDS_KEY);
      } else {
        localStorage.setItem(GAME_WORDS_KEY, JSON.stringify(rest));
      }
      return rest;
    });

    try {
      if (finishedWord) {
        await API.post("/append-history", {
          userId: user.id,
          word: finishedWord.word,
          courseName: finishedWord.courseName,
          date: new Date().toISOString(),
          status: "intro", // –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –≤ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏
        });
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏—Å—Ç–æ—Ä–∏–∏:", error);
    } finally {
      progressingRef.current = false;
    }
  };

  return (
    <div className="container mt-5 text-center">
      {wordList.length > 0 ? (
        <>
          <p className="text-muted mb-3">–û—Å—Ç–∞–ª–æ—Å—å —Å–ª–æ–≤: {wordList.length}</p>
          <MatchExamplePairsGame
            word={wordList[0].word}
            onComplete={handleWordComplete}
          />
        </>
      ) : (
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤...</p>
      )}
    </div>
  );
};

export default DailyGames;
