import React, { useEffect, useState, useContext } from "react";
import { useParams } from "react-router-dom";
import { AuthContext } from "../context/AuthContext";
import API from "../utils/api";
import PuzzleGameCore from "./PuzzleGameCore";
import TextGameCore from "./TextGameCore";
// import WordAssociations from "./WordAssociations";
// import CONFIG from "../config";
import "./WordIntervalPuzzle.css";
import TranslationGame from "./TranslationGame";
const DailyGames = () => {
  // const { lesson } = useParams();
  const { user } = useContext(AuthContext);
  const { courseName, lessonName } = useParams();
  const decodedCourseName = decodeURIComponent(courseName);
  const decodedLessonName = decodeURIComponent(lessonName);

  //
  const [wordList, setWordList] = useState([]);
  const [currentWordIndex, setCurrentWordIndex] = useState(0);
  const [currentGameType, setCurrentGameType] = useState("text"); // "text", "association", "puzzle"
  const [isSecondRound, setIsSecondRound] = useState(false);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [gameCompleted, setGameCompleted] = useState(false);

  useEffect(() => {
    if (!user || !user.id) return;

    const fetchWords = async () => {
      try {
        const response = await API.get(
          `/words/${user.id}/${decodedCourseName}/${decodedLessonName}`
        );
        setWordList(response.data);
        setLoading(false);
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ–≤:", err);
        setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–æ–≤–∞.");
        setLoading(false);
      }
    };

    fetchWords();
  }, [user, decodedCourseName, decodedLessonName]);

  const handleNextGame = () => {
    console.log("–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–µ");

    // –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–µ
    if (isSecondRound) {
      // –ï—Å–ª–∏ –º—ã —É–∂–µ –≤–æ –≤—Ç–æ—Ä–æ–º —Ä–∞—É–Ω–¥–µ (PuzzleGameCore), –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–π–¥–µ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É
      const nextWordIndex = currentWordIndex + 1;

      if (nextWordIndex >= wordList.length) {
        // –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –ø—Ä–æ–π–¥–µ–Ω—ã –≤–æ –≤—Ç–æ—Ä–æ–º —Ä–∞—É–Ω–¥–µ, –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        setGameCompleted(true);
        console.log("üèÅ –í—Å–µ —Å–ª–æ–≤–∞ –ø—Ä–æ–π–¥–µ–Ω—ã!");
        return;
      }

      setCurrentWordIndex(nextWordIndex);
    } else {
      // –ï—Å–ª–∏ –º—ã –≤ –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ (TextGameCore -> WordAssociations)
      if (currentGameType === "text") {
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è —Å TextGameCore –Ω–∞ WordAssociations –¥–ª—è —Ç–æ–≥–æ –∂–µ —Å–ª–æ–≤–∞
        setCurrentGameType("association");
      } else {
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è —Å WordAssociations –Ω–∞ TextGameCore —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞
        const nextWordIndex = currentWordIndex + 1;

        if (nextWordIndex >= wordList.length) {
          // –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –ø—Ä–æ–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫–æ –≤—Ç–æ—Ä–æ–º—É —Ä–∞—É–Ω–¥—É
          setIsSecondRound(true);
          setCurrentWordIndex(0);
        } else {
          // –ò–Ω–∞—á–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É
          setCurrentWordIndex(nextWordIndex);
          setCurrentGameType("text");
        }
      }
    }
  };

  if (loading) return <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>;
  if (error) return <p className="alert alert-danger">{error}</p>;
  if (wordList.length === 0) return <p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞.</p>;
  if (gameCompleted)
    return <p>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∏–∑—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–ª–æ–≤!</p>;

  const currentWord = wordList[currentWordIndex];

  if (!currentWord) {
    return <p>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ–≤–∞.</p>;
  }

  // –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã
  if (isSecondRound) {
    console.log(
      "üéÆ –í—Ç–æ—Ä–æ–π —Ä–∞—É–Ω–¥: PuzzleGameCore –¥–ª—è —Å–ª–æ–≤–∞:",
      currentWord.word,
      `(${currentWordIndex + 1}/${wordList.length})`
    );

    return (
      <TranslationGame
        word={currentWord.word}
        translation={currentWord.translation}
        onNext={handleNextGame}
      />
    );
  } else {
    if (currentGameType === "text") {
      console.log(
        "üéÆ –ü–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥ (1/2): TextGameCore –¥–ª—è —Å–ª–æ–≤–∞:",
        currentWord.word,
        `(${currentWordIndex + 1}/${wordList.length})`
      );

      return (
        <TextGameCore
          word={currentWord.word}
          occurrences={0} // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∫–æ–¥–æ–º
          onNext={handleNextGame}
        />
      );
    } else {
      console.log(
        "üéÆ –ü–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥ (2/2): WordAssociations –¥–ª—è —Å–ª–æ–≤–∞:",
        currentWord.word,
        `(${currentWordIndex + 1}/${wordList.length})`
      );

      return (
        <PuzzleGameCore
          wordData={currentWord}
          occurrences={2} // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∫–æ–¥–æ–º
          onNext={handleNextGame}
        />

        // <WordAssociations
        //   word={currentWord.word}
        //   email="bt.tarasenko@gmail.com"
        //   lesson={lesson}
        //   occurrences={1} // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∫–æ–¥–æ–º
        //   onNext={handleNextGame}
        // />
      );
    }
  }
};

export default DailyGames;
