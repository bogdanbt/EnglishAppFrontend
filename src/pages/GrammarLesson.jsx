import React, { useEffect, useState, useContext } from "react";
import { useParams, Link, useNavigate } from "react-router-dom";
import { AuthContext } from "../context/AuthContext";
import API from "../utils/api";

const GrammarLesson = () => {
  const { user } = useContext(AuthContext);
  const { courseGrammarName, lessonGrammarName } = useParams();
  const decodedCourseName = decodeURIComponent(courseGrammarName);
  const decodedLessonName = decodeURIComponent(lessonGrammarName);
  const navigate = useNavigate();
  const [sentences, setSentences] = useState([]);

  useEffect(() => {
    if (!user || !user.id) return;

    const fetchSentences = async () => {
      try {
        const response = await API.get(
          `/grammar/${user.id}/${decodedCourseName}/${decodedLessonName}`
        );
        setSentences(response.data);
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:", error);
      }
    };

    fetchSentences();
  }, [user, decodedCourseName, decodedLessonName]);

  return (
    <div className="container mt-5">
      <h2 className="text-center">–£—Ä–æ–∫: {decodedLessonName}</h2>

      {sentences.length === 0 ? (
        <p className="text-center mt-4">–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ —ç—Ç–æ–º —É—Ä–æ–∫–µ.</p>
      ) : (
        <>
          <div className="list-group mb-4">
            {sentences.map((item, index) => (
              <div
                key={index}
                className="list-group-item d-flex flex-column align-items-start"
              >
                <strong>RU:</strong> {item.translation}
                <span className="text-muted mt-1">
                  EN: {item.sentenceGrammar}
                </span>

                <div className="mt-2"> 
                  <button
                    className="btn btn-sm btn-outline-primary me-2"
                    onClick={() => {
                      const newSentence = prompt(
                        "–ù–æ–≤–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:",
                        item.sentenceGrammar
                      );
                      const newTranslation = prompt(
                        "–ù–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥:",
                        item.translation
                      );
                      if (newSentence && newTranslation) {
                        API.put(`/grammar/${item._id}`, {
                          sentenceGrammar: newSentence,
                          translation: newTranslation,
                        })
                          .then(() => window.location.reload())
                          .catch((err) =>
                            console.error("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", err)
                          );
                      }
                    }}
                  >
                    ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                  </button>
                </div>
              
              </div>
            ))}
          </div>

          <div className="text-center">
            <Link
              to={`/grammar-course/${encodeURIComponent(
                courseGrammarName
              )}/lesson/${encodeURIComponent(lessonGrammarName)}/game`}
              className="btn btn-success"
            >
              üéÆ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É
            </Link>
          </div>
          <button
            className="btn btn-outline-danger mt-3"
            onClick={async () => {
              try {
                await API.put("/grammar-progress", {
                  userId: user.id,
                  courseGrammarName: decodedCourseName,
                  lessonGrammarName: decodedLessonName,
                  repeats: 0,
                });
                alert("–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω!");
              } catch (err) {
                console.error("–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:", err);
              }
            }}
          >
            üîÑ –û–±–Ω—É–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
          </button>
          <div className="text-center mt-4"> 
            <button
              className="btn btn-danger"
              onClick={async () => {
                if (
                  window.confirm(
                    "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —É—Ä–æ–∫?"
                  )
                ) {
                  try {
                    await API.delete(
                      `/grammar/${user.id}/${decodedCourseName}/${decodedLessonName}`
                    );
                    alert("–£—Ä–æ–∫ —É–¥–∞–ª—ë–Ω.");
                    navigate(`/grammar-course/${courseGrammarName}`);
                  } catch (err) {
                    console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞:", err);
                  }
                }
              }}
            >
              üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —É—Ä–æ–∫
            </button>
          </div>

        </>
      )}
    </div>
  );
};

export default GrammarLesson;
